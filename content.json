{"meta":{"title":"Rolitter Blog","subtitle":"日常学习与兴趣交流","description":"rolitter site","author":"rolitter","url":"https://rolitter.github.io"},"pages":[{"title":"关于我","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":false,"path":"about/shi.html","permalink":"https://rolitter.github.io/about/shi.html","excerpt":"","text":"Rolitter image Blockquote 当blockquote、img、pre、figure为第一级内容时，在page布局中拥有card阴影，所有标题居中展示。 Content@card{ 目前的想法是预定义一系列内容模块，通过像输入 Markdown 标记一样来简单调用。好在 Markdown 没有把所有便于输入的符号占用，最终我定义了@moduleName{ ... }这种标记格式。如果你使用过Asp.Net MVC，一定会很熟悉这种用法，没错，就是razor。 page布局中的title和subtitle对应 Markdown 中的title和description。 基本的内容容器还是card，你可以这样使用card： 12345@card&#123;在`page`页中，建议把内容都放到`card`中。&#125; 需要注意的是：标记与内容之间必须空一行隔开。至于为何要这样，看到最后就明白了。 } Column@column-2{ @card{ 左与card标记类似，分栏的标记是这样的： 123456789101112131415@column-2&#123;@card&#123;# 左&#125;@card&#123;# 右&#125;&#125; 为了移动端观感，当屏幕宽度小于 480 时，column将换行显示。 } @card{ 右column中的每一列具有等宽、等高的特点，最多支持三栏： 123456789101112131415161718192021@column-3&#123;@card&#123;左&#125;@card&#123;中&#125;@card&#123;右&#125;&#125; } } Three columns@column-3{ @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } } Timeline@card{ 在timeline模块中，你的 5 号标题#####和六号标题######将被“征用”，用作时间线上的标记点： 123456789101112@timeline&#123;##### 2016@item&#123;###### 11月6日为 Card theme 添加 page layout。&#125;&#125; @item中多行内容可以换行输入，目前不允许隔行： 12345678910111213141516171819202122@timeline&#123;##### 2016@item&#123;###### 11月6日第一行 第二行 /* ok */&#125;@item&#123;###### 11月6日第一行第二行 /* error */&#125;&#125; } @timeline{ 2016@item{ 11月6日为 Card theme 添加 page layout。加快绿化空间好看 } @item{ 10月31日本地化多说。 } @item{ 10月24日为 Indigo 主题创建 Card 分支。 } 2015@item{ 2月24日发布 Indigo 主题到 hexo.io。 } @item{ 1月22日创建 Indigo 主题。 } } CodeBlock12345// 自定义内容块实现page.content.replace(/&lt;p&gt;&#125;&lt;\\/p&gt;/g, '&lt;/div&gt;') .replace(/&lt;p&gt;@([\\w-]+)&#123;&lt;\\/p&gt;/g, function(match, $1)&#123; return '&lt;div class=\"'+ $1 +'\"&gt;' &#125;) @card{ 这里可以解释，为什么标记之间必须要隔一行了。 当你在 Markdown 中隔行输入时，会形成新的段落，而如果一个段落中的内容仅仅是我们约定的标记，就可以用很容易的用正则匹配到替换为对应的模块容器。 } End@card{ 为了解决 Hexo 自定义页面slug为空不能很好的使用多说评论这个问题，现在已经给每个自定义页面自动生成了hexo-page-path这种格式的slug。本来准备用date做格式的最后一节，测试中发现 page 中的date值为修改时间，是动态的。综合考虑使用了路径path。 以后可以根据需要添加更多模块支持。 打赏和评论默认开启，可根据需要在 Markdown 头部定义是否关闭。 }"},{"title":"关于我","date":"2018-07-09T08:24:11.000Z","updated":"2018-07-09T08:24:11.000Z","comments":false,"path":"about/index.html","permalink":"https://rolitter.github.io/about/index.html","excerpt":"","text":"rolitter image 12345678910function rolitter() &#123; // 手机号码 let number = [ 8, 7, 3, 2, 1, 9 ]; let index = [ 4, 2, 3, 1, 1, 0, 1, 5, 1, 4, 4 ]; let mobile = ''; for (let item of index) &#123; mobile += number[item]; &#125;; return mobile;&#125; @timeline{ 个人简介@item{ 姓名李高愈 } @item{ 性别男 } @item{ 职位前端开发工程师 } @item{ 毕业院校广西民族师范学院 } 联系方式@item{ QQ576372036 } @item{ QQ邮箱576372036@qq.com } @item{ Gmail邮箱rolitter@gmail.com } 工作经历@item{ 广州太空漫步科技有限公司 2017-至今} }"},{"title":"标签","date":"2017-07-06T09:49:46.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"tags/index.html","permalink":"https://rolitter.github.io/tags/index.html","excerpt":"","text":""},{"title":"demo","date":"2018-07-18T07:48:28.000Z","updated":"2018-07-18T07:48:28.000Z","comments":false,"path":"demo/index.html","permalink":"https://rolitter.github.io/demo/index.html","excerpt":"","text":"Image image @card{ 目前的想法是预定义一系列内容模块，通过像输入 Markdown 标记一样来简单调用。好在 Markdown 没有把所有便于输入的符号占用，最终我定义了@moduleName{ ... }这种标记格式。如果你使用过Asp.Net MVC，一定会很熟悉这种用法，没错，就是razor。 page布局中的title和subtitle对应 Markdown 中的title和description。 基本的内容容器还是card，你可以这样使用card： 12345@card&#123;在`page`页中，建议把内容都放到`card`中。&#125; 需要注意的是：标记与内容之间必须空一行隔开。至于为何要这样，看到最后就明白了。 } Column@column-2{ @card{ 左需要注意的是：标记与内容之间必须空一行隔开。至于为何要这样，看到最后就明白了。 } @card{ 右需要注意的是：标记与内容之间必须空一行隔开。至于为何要这样，看到最后就明白了。 } } Three columns@column-3{ @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } } @column-3{ @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老5备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿2带杏性热求已。 } @card{ } }"}],"posts":[{"title":"npm设置","slug":"npm","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/npm/","link":"","permalink":"https://rolitter.github.io/2018/07/04/npm/","excerpt":"","text":"npm 更换源地址查看当前源地址1npm config get registry 更换源地址1npm config set registry https://registry.npm.taobao.org/ 关于chromedriver下载失败的方法1npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver 升级nodejs和npm到最新版本第一步,先查看本机node.js版本1node -v 第二步,清除node的cache1sudo npm cache clean -f ####第三步,安装n工具,用来管理node.js版本1sudo npm install -g n 第四步,安装最新版本的node.js1sudo n stable 第五步,查看本机的node.js版本1node -v 第六步，更新npm到最新版：1sudo npm install npm@latest -g 第七步,验证12node -vnpm -v","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"https://rolitter.github.io/tags/npm/"}]},{"title":"JavaScript随手记","slug":"JavaScript随手记","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/JavaScript随手记/","link":"","permalink":"https://rolitter.github.io/2018/07/04/JavaScript随手记/","excerpt":"","text":"js 0.1+0.2=!0.3引入bignumber.js123456789import &#123;BigNumber&#125; from 'bignumber.js' proEquals (value) &#123; //乘100 let x = new BigNumber(value) return Number(x.multipliedBy(100)) &#125;, proDivision (value) &#123; //除100 let x = new BigNumber(value) return Number(x.div(100)) &#125; 金额 千分符12345678function numverWithCommas(num) &#123; // 正则解释: 匹配到 \\B(非单词边界)后, 后面要匹配到 (\\d&#123;3&#125;)+(?!\\d) // (\\d&#123;3&#125;)+ 至少匹配到一次或多次三个数字 // (?!\\d) 同时后面不是数字的话, 就匹配. // 注意, 后面的(?=)那一段代码只是判断的规则, 匹配到后只替换掉\\B // 这是一个很巧妙的方法 .. return num.toString().replace(/\\B(?=(\\d&#123;3&#125;)+(?!\\d))/g, ',')&#125; 随机数123function random (min, max) &#123; return Math.round(Math.random() * (max - min) + min)&#125; 字符串转数字1['1.1', '4566', '3e300'].map(Number) //[1.1, 4566, 3e+300] 月份日期转星座123456789/** * 根据生日的月份和日期，计算星座。 * @param &#123;String&#125; m - 月份 * @param &#123;String&#125; d - 日期 * �@desc 返回星座名 */function getAstro(m,d)&#123; return \"魔羯水瓶双鱼牡羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯\".substr(m*2-(d&lt;\"102223444433\".charAt(m-1)- -19)*2,2);&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"}]},{"title":"JavaScript简写","slug":"JavaScript简写","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/JavaScript简写/","link":"","permalink":"https://rolitter.github.io/2018/07/04/JavaScript简写/","excerpt":"","text":"定义初始值1const variable2 = variable1 || &apos;abc&apos;; 箭头函数普通写法123function sayHello(name) &#123; console.log(&apos;Hello&apos;, name);&#125; 简写1const sayHello = name =&gt; console.log(&apos;Hello&apos;, name) 隐式返回简写普通写法123function calcCircumference(diameter) &#123; return Math.PI * diameter&#125; 简写12calcCircumference = diameter =&gt; (Math.PI * diameter)//函数名=接受值=&gt; 返回值 展开运算符简写普通写法1234567// 拼接数组const odd = [1, 3, 5];const nums = [2 ,4 , 6].concat(odd); // 克隆数组const arr = [1, 2, 3, 4];const arr2 = arr.slice() 简写12345678// 拼接数组const odd = [1, 3, 5 ];const nums = [2 ,4 , 6, ...odd];console.log(nums); // [ 2, 4, 6, 1, 3, 5 ] // 克隆数组const arr = [1, 2, 3, 4];const arr2 = [...arr];","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"}]},{"title":"使用FileReader实现图片上传预览","slug":"FileReader","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/FileReader/","link":"","permalink":"https://rolitter.github.io/2018/07/04/FileReader/","excerpt":"","text":"使用FileReader实现图片上传预览html123&lt;label for=\"upload\" class=\"label\"&gt;选择图片 &lt;input type=\"file\" id=\"upload\" @change='selectImage' hidden=\"\" accept=\"image/*\"&gt;&lt;/label&gt; JavaScript123456789selectImage(event) &#123; let reader = new FileReader(); let file = event.target.files[0]; reader.readAsDataURL(file); reader.onloadend = function() &#123; // 把reader.result赋img便签即可进行预览 let imgBase64 = reader.result.replace(/^.*?,/, '')// 清除base64 前缀 &#125;&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"FileReader","slug":"FileReader","permalink":"https://rolitter.github.io/tags/FileReader/"}]},{"title":"css常用知识点","slug":"css","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/css/","link":"","permalink":"https://rolitter.github.io/2018/07/04/css/","excerpt":"","text":"div设置display:inline1block元素设置为inline,不能再设置该元素的height和width,margin-top,margin-bottom,float vw123456//iPhone 6尺寸作为设计稿基准$vw_base: 375; @function vw($px) &#123; @return ($px / 375) * 100vw;&#125; scss px转rem1234567891011121314151617181920212223// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推$vw_fontsize: 75; // iPhone 6尺寸的根元素大小基准值@function rem($px) &#123; @return ($px / $vw_fontsize ) * 1rem;&#125;// 根元素大小使用 vw 单位$vw_design: 750;html &#123; font-size: ($vw_fontsize / ($vw_design / 2)) * 100vw; // 同时，通过Media Queries 限制根元素最大最小值 @media screen and (max-width: 320px) &#123; font-size: 64px; &#125; @media screen and (min-width: 540px) &#123; font-size: 108px; &#125;&#125;// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小body &#123; max-width: 540px; min-width: 320px;&#125; tabletable表格跟随浏览器宽度适应.123&#123; able-layout:fixed&#125; 文字超出省略号单行文本12345&#123; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;&#125; 多行文本123456&#123; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden;&#125; 清除浮动简洁版1234567891011.clearfix:before, .clearfix:after &#123; content:\"\"; display:table;&#125;.clearfix:after&#123; clear:both; overflow:hidden;&#125;.clearfix&#123; zoom:1;&#125; 经典版12345678.clearfix:after &#123; visibility: hidden; display: block; font-size: 0; content: \" \"; clear: both; height: 0;&#125; bootstrap版本12345.clearfix::after &#123; display: block; clear: both; content: \"\";&#125;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://rolitter.github.io/tags/css/"}]},{"title":"axios使用总结","slug":"axios","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/axios/","link":"","permalink":"https://rolitter.github.io/2018/07/04/axios/","excerpt":"","text":"axios挂在vue上12import axios from 'axios'Vue.prototype.$http = axios 在vue文件中使用123this.$http.get('http://www.baidu.com') .then((res) =&gt; &#123; &#125;) axios 请求携带头部12345678910111213141516171819202122232425262728293031import axios from 'axios';import &#123; getToken &#125; from '@/utils/auth'const service = axios.create();service.defaults.timeout = 5000;service.defaults.baseURL = 'http://127.0.0.1:8080'service.interceptors.request.use( config =&gt; &#123; let token = getToken() if (token) &#123; config.headers.Authorization = token &#125; return config &#125;, error =&gt; &#123; return Promise.reject(error) &#125;);service.interceptors.response.use( response =&gt; &#123; return response &#125;, error =&gt; &#123; return Promise.resolve(error.response) &#125;)export default service","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"axios","slug":"axios","permalink":"https://rolitter.github.io/tags/axios/"},{"name":"vue","slug":"vue","permalink":"https://rolitter.github.io/tags/vue/"}]},{"title":"base64中文不兼容解决方案","slug":"base64中文不兼容解决方案","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/base64中文不兼容解决方案/","link":"","permalink":"https://rolitter.github.io/2018/07/04/base64中文不兼容解决方案/","excerpt":"","text":"base64中文不兼容解决方案编码123window.btoa(encodeURIComponent(str))// orwindow.btoa(unescape(encodeURIComponent( str ))) 解码123decodeURIComponent(window.atob(str))// ordecodeURIComponent(escape(window.atob( str )))","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"base64","slug":"base64","permalink":"https://rolitter.github.io/tags/base64/"}]},{"title":"图片居中显示","slug":"css设置图片居中显示","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/css设置图片居中显示/","link":"","permalink":"https://rolitter.github.io/2018/07/04/css设置图片居中显示/","excerpt":"","text":"图片居中显示\b12345678.avatar &#123; width: 86px; height: 86px; border-radius: 50%; background: 50%/cover; background-color: #f1f1f1; background-image: url(https://avatars.githubusercontent.com/u/27326998?v=3);&#125;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://rolitter.github.io/tags/css/"}]},{"title":"微信下iOS和Android视频播放问题","slug":"微信下iOS和Android视频播放问题","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/微信下iOS和Android视频播放问题/","link":"","permalink":"https://rolitter.github.io/2018/07/04/微信下iOS和Android视频播放问题/","excerpt":"","text":"微信下 iOS Android 全屏视频在制作全屏视频需求时，你会发现 iOS、Android 在这一块多多少少都存在一些问题。 iOSiOS 通过 webkit-playsinline、playsinline 实现内嵌全屏，不调用系统全屏，有必要的情况下配合 iphone-inline-video 库使用。1&lt;video src=\"video.mp4\" webkit-playsinline playsinline&gt;&lt;/video&gt; 1234567/* 隐藏 iOS 视频的播放暂停按钮 */video::-webkit-media-controls-play-button,video::-webkit-media-controls-start-playback-button &#123; opacity: 0; pointer-events: none; width: 5px;&#125; AndroidAndroid 除非你的域名下微信的白名单，否则你会面临两种选择： 使用 X5 自建播放器 隐藏导航条的全屏视频 自建播放器就跟废的没两样，全屏偶尔还能用上，通过 x5-video-player-type=”h5”、x5-video-player-fullscreen=”true”可视频全屏，同时顶部的微信标题条也会消失，视频内会有一个全屏的 icon 按钮，退出全屏会使视频暂停1&lt;video src=\"video.mp4\" x5-video-player-type=\"h5\" x5-video-player-fullscreen=\"true\"&gt;&lt;/video&gt;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"https://rolitter.github.io/tags/css/"},{"name":"video","slug":"video","permalink":"https://rolitter.github.io/tags/video/"}]},{"title":"获取URL中get的参数值","slug":"geturl","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/geturl/","link":"","permalink":"https://rolitter.github.io/2018/07/04/geturl/","excerpt":"","text":"获取URL中get的参数值123456789101112131415// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET[\"t1\"], GET[\"t2\"], GET[\"t3\"]let str = 'test.htm?t1=1&amp;t2=2&amp;t3=3'function get_get(str)&#123; querystr = str.split(\"?\") if(querystr[1])&#123; GETs = querystr[1].split(\"&amp;\"); GET = []; for(i=0;i&lt;GETs.length;i++)&#123; tmp_arr = GETs.split(\"=\") key=tmp_arr[0] GET[key] = tmp_arr[1] &#125; &#125; return querystr[1];&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"}]},{"title":"日期格式化函数","slug":"日期格式化函数","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/日期格式化函数/","link":"","permalink":"https://rolitter.github.io/2018/07/04/日期格式化函数/","excerpt":"","text":"日期格式化函数1234567891011121314151617181920Date.prototype.format = function(format)&#123; var o = &#123; \"M+\" : this.getMonth()+1, //month \"d+\" : this.getDate(), //day \"h+\" : this.getHours(), //hour \"m+\" : this.getMinutes(), //minute \"s+\" : this.getSeconds(), //second \"q+\" : Math.floor((this.getMonth()+3)/3), //quarter \"S\" : this.getMilliseconds() //millisecond &#125;; if(/(y+)/.test(format)) format=format.replace(RegExp.$1,(this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); for(var k in o)&#123; if(new RegExp(\"(\"+ k +\")\").test(format)) format = format.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] :(\"00\"+ o[k]).substr((\"\"+ o[k]).length)); &#125; return format;&#125;//调用//new Date().format(\"yyyy-MM-dd hh:mm:ss\");","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"date","slug":"date","permalink":"https://rolitter.github.io/tags/date/"}]},{"title":"js深拷贝和浅拷贝","slug":"js深拷贝和浅拷贝","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/js深拷贝和浅拷贝/","link":"","permalink":"https://rolitter.github.io/2018/07/04/js深拷贝和浅拷贝/","excerpt":"","text":"es6es6拷贝,不能深拷贝123let arr = &#123;t: 1, p: 'gg'&#125;let brr= Object.assign(&#123;&#125;, arr);console.log(brr) //&#123;t: 1, p: 'gg'&#125; JSON简单实现深拷贝的方法，当然，有一定限制，如下：1const obj1 = JSON.parse(JSON.stringify(obj)); 思路就是将一个对象转成json字符串，然后又将字符串转回对象。这个方法当有属性是undefined或null的时候会被移除掉。而且不能拷贝function. Lodash使用Lodash 的_.defaultsDeep方法可以得到深拷贝的合并。12345678var array = [1];var other = _.concat(array, 2, [3], [[4]]); console.log(other);// =&gt; [1, 2, 3, [4]] console.log(array);// =&gt; [1] Lodash中文文档","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"}]},{"title":"图标跟随文字,溢出省略","slug":"图标跟随文字,溢出省略","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/图标跟随文字,溢出省略/","link":"","permalink":"https://rolitter.github.io/2018/07/04/图标跟随文字,溢出省略/","excerpt":"","text":"图标跟随文字,溢出省略标签一直跟随在文字后面。如果文字超出一行，文字裁断省略，标签保留在最右。 1234&lt;div class=\"demo\"&gt; &lt;span&gt;官方旗舰店&lt;/span&gt; &lt;em&gt;特价优惠&lt;/em&gt; &lt;/div&gt; 123456789101112131415161718192021.demo &#123; margin-right: 60px; /* 对应是标签的宽度 */ white-space: nowrap; span, em &#123; display: inline-block; vertical-align: middle; &#125; span &#123; max-width: 100%; /* 单行文字超出省略 */ overflow: hidden; text-overflow: ellipsis; white-space: nowrap; &#125; em &#123; width: 60px; /* 标签的宽度 */ color: #fff; padding: 5px 8px; background: #f00; &#125;&#125;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://rolitter.github.io/tags/css/"}]},{"title":"正则速查表","slug":"正则速查表","date":"2018-07-04T04:16:30.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/04/正则速查表/","link":"","permalink":"https://rolitter.github.io/2018/07/04/正则速查表/","excerpt":"","text":"正则匹配中文字节1234// 使用正则匹配中文字节, 将其替换为xx, 再获取字符串的长度就是完整的长度了.function getLen(str) &#123; return str.replace(/[^\\x00-\\xff]/g, 'xx').length;&#125; 邮箱12// 匹配是否符合邮件规则var reg = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/; 常见表单验证123456789101112131415161718192021222324// 用户名正则，4到16位（字母，数字，下划线，减号）var userNameReg = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/;// 必须拥有数字和特殊字符，并且在6 ~ 16位之间// (?=.*[0-9]) - 断言一个字符串至少有一个数字;// (?=.*[!@#$%^&amp;*]) - 断言一个字符串至少有一个特殊字符。var reg = /^(?=.*[0-9])(?=.*[!@#$%^&amp;*])[a-zA-Z0-9!@#$%^&amp;*]&#123;6,16&#125;$/;// 匹配邮箱地址var mailReg = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;// 中国六位数的邮政编码var postalCode = /^\\d&#123;6&#125;$/;// 匹配15~18位身份证var IDCard = /(^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\\d&#123;5&#125;\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;2&#125;$)/;// 匹配18位的新版身份证var IDCard_18 = /^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$/;// 校验输入框是字符数为是否为 4~16 位(英文长度为1, 汉字长度为2)var numName = /^[a-zA-Z0-9]&#123;4,16&#125;$/;var mate = numName.test(value.replace(/[\\u4e00-\\u9fa5]/g, 'aa')); 联系方式1234567891011// 5-11位的腾讯qq号var qqReg = /^[1-9][0-9]&#123;4,11&#125;$/;// 微信号正则，6至20位，以字母开头，字母，数字，减号，下划线var qqReg = /^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/;// 国内常见var phone = /^1[3|5|8|9]\\d&#123;9&#125;$/;// 固定电话var telephone = /^(0[0-9]&#123;2&#125;)\\d&#123;8&#125;$|^(0[0-9]&#123;3&#125;(\\d&#123;7,8&#125;))$/; 匹配特定数字1234567891011121314151617181920212223242526272829// 匹配正整数var reg = /^[1-9]\\d*$/;// 匹配负整数var reg = /^-[1-9]\\d*$/;// 匹配整数var reg = /^-?[1-9]\\d*$/;// 匹配非负整数（正整数 + 0）var reg = /^[1-9]\\d*|0$/;// 匹配非正整数（负整数 + 0）var reg = /^-[1-9]\\d*|0$/;// 匹配正浮点数var reg = /^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$/;// 匹配负浮点数var reg = /^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$/;// 匹配浮点数var reg = /^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$/;// 匹配非负浮点数（正浮点数 + 0）var reg = /^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$/;// 匹配非正浮点数（负浮点数 + 0）var reg = /^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$/; 字符串相关123456789101112131415161718192021222324// 匹配由26个英文字母组成的字符串var reg = /^[A-Za-z]+$/;// 匹配由26个英文字母的大写组成的字符串var reg = /^[A-Z]+$/;// 匹配由26个英文字母的小写组成的字符串var reg = /^[a-z]+$/;// 匹配由数字和26个英文字母组成的字符串var reg = /^[A-Za-z0-9]+$/;// 匹配由数字、26个英文字母或者下;划线组成的字符串var reg = /^\\w+$/;// 匹配空白行的正则表达式var reg = /\\n\\s*\\r/;// 匹配首尾空白字符的正则表达式var reg = /^\\s*|\\s*$/;var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;// 匹配双字节字符(包括汉字在内, 一个双字节字符长度计2，ASCII字符计1)var reg = /[^\\x00-\\xff]/g;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"},{"name":"reg","slug":"reg","permalink":"https://rolitter.github.io/tags/reg/"}]},{"title":"JavaScript小测验题目及答案","slug":"JavaScript小测验题目及答案","date":"2018-07-03T10:51:16.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2018/07/03/JavaScript小测验题目及答案/","link":"","permalink":"https://rolitter.github.io/2018/07/03/JavaScript小测验题目及答案/","excerpt":"","text":"小测验题目及答案1 What is printed in the console?12345var foo = function foo() &#123; console.log(foo === foo); &#125;;foo();// true 2 What does the above1234567 function aaa() &#123; return &#123; test: 1 &#125;;&#125; typeof aaa() // underfined 3 What is the result?12Number(\"1\") - 1 == 0;// true 4 3 What is the result?12(true + false) &gt; 2 + true;// false 5 What is?12345678 function bar() &#123; return foo; foo = 10; function foo() &#123;&#125; var foo = '11';&#125;typeof bar()// function 6 What is the result?12\"1\" - - \"1\";// 2 7 What is the order of values?1234567891011121314151617var x = 3;var foo = &#123; x: 2, baz: &#123; x: 1, bar: function() &#123; return this.x; &#125; &#125;&#125;var go = foo.baz.bar;alert(go());alert(foo.baz.bar());// 3, 1 8 What is the result?12new String(\"This is a string\") instanceof String;// true 9 What is the result?12\"This is a string\" instanceof String;// false 10 What is the result?123456[] + [] + 'foo'.split('');/*[] + [] = \"\"'foo'.split('') f,o,f \"f,o,o\"*/ 11 What is the result?123new Array(5).toString();//new Array(5) [,,,,]// toString() \",,,,\" 12 What is the result?1234var myArr = ['foo', 'bar', 'baz'];myArr.length = 0; // 清空myArrmyArr.push('bin'); console.log(myArr); // bin 13 What is the result?123String('Hello') === 'Hello'; // true//String('Hello') 输出 Hello 14 What is printed on the console?123456789 var x = 0;function foo() &#123; x++; this.x = x; return foo;&#125;var bar = new new foo;console.log(bar.x);// underfined 15 What is the result?123456789 var bar = 1, foo = &#123;&#125;;foo: &#123; bar: 2; baz: ++bar;&#125;;foo.baz + foo.bar + bar;// NAN 16 What is the result of console.log?12345 var myArr = ['foo', 'bar', 'baz']; myArr[2]; console.log('2' in myArr); '2' in 隐式转换 变成 number的 2// true 17 What value is alerted?1234567var arr = [];arr[0] = 'a';arr[1] = 'b';arr.foo = 'c';alert(arr.length);// arr = ['a', 'b', foo:'c']// lngth = 2 18 What is the result?12345610 &gt; 9 &gt; 8 === true;// 10 &gt; 9 = true// true = 1 &gt; 8 = false//false === true// false 19 What value is alerted?123456function foo(a, b) &#123; arguments[1] = 2; alert(b);&#125;foo(1);// underfined 20 What is the result?123NaN === NaN;// NaN not a number// false","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://rolitter.github.io/tags/JavaScript/"}]},{"title":"hexo命令","slug":"hexo","date":"2017-07-07T03:51:16.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2017/07/07/hexo/","link":"","permalink":"https://rolitter.github.io/2017/07/07/hexo/","excerpt":"","text":"hexo命令 简写新建文章1$ hexo n \"My New Post\"==hexo new \"My New Post\" 详细信息: Writing 启动服务预览1$ hexo s == hexo server 详细信息: Server 生成1$ hexo g == hexo generate 详细信息: Generating 部署1$ hexo d == hexo deploy 详细信息: Deployment 服务器1234567$ hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。$ hexo server -s #静态模式$ hexo server -p 5000 #更改端口$ hexo server -i 192.168.1.1 #自定义 IP$ hexo clean #清除缓存 网页正常情况下可以忽略此条命令$ hexo g #生成静态网页$ hexo d #开始部署 监视文件变动12$ hexo generate #使用 Hexo 生成静态文件快速而且简单$ hexo generate --watch #监视文件变动 完成后部署123两个命令的作用是相同的$ hexo generate --deploy$ hexo deploy --generate 简写12$ hexo deploy -g$ hexo server -g 草稿1$ hexo publish [layout] &lt;title&gt; 模版123456789$ hexo new &quot;postName&quot; #新建文章$ hexo new page &quot;pageName&quot; #新建页面$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）$ hexo deploy #将.deploy目录部署到GitHub$ hexo new [layout] &lt;title&gt;$ hexo new photo &quot;My Gallery&quot;$ hexo new &quot;Hello World&quot; --lang tw 设置文章摘要1$ 以上是文章摘要 &lt;!--more--&gt; 以下是余下全文","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rolitter.github.io/tags/hexo/"}]},{"title":"欢迎来到我的博客","slug":"welcome","date":"2017-07-06T21:51:16.000Z","updated":"2018-07-04T04:16:30.000Z","comments":true,"path":"2017/07/07/welcome/","link":"","permalink":"https://rolitter.github.io/2017/07/07/welcome/","excerpt":"","text":"欢迎","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://rolitter.github.io/tags/随笔/"}]}]}